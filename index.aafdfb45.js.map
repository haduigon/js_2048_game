{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.board = initialState;\n        this.score = 0;\n        this.status = \"idle\";\n        this.cells = document.getElementsByClassName(\"field-row\");\n        this.scoreElement = document.getElementsByClassName(\"game-score\");\n        this.count = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this._checkNextStep(this.board, \"left\")) {\n                    for(var row = 0; row <= this.board.length - 1; row++){\n                        this._compress(this.board[row]);\n                        this._merge(this.board[row]);\n                        this._compress(this.board[row]);\n                    }\n                    this._renderBoard();\n                    this._generateNumbers();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this._checkNextStep(this.board, \"right\")) {\n                    for(var row = 0; row <= this.board.length - 1; row++){\n                        this._compressDown(this.board[row]);\n                        this._mergeDown(this.board[row]);\n                        this._compressDown(this.board[row]);\n                    }\n                    this._renderBoard();\n                    this._generateNumbers();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this._checkNextStep(this.board, \"up\")) {\n                    var _this = this, _loop = function(col) {\n                        var column = _this.board.map(function(row) {\n                            return row[col];\n                        });\n                        _this._compress(column);\n                        _this._merge(column);\n                        _this._compress(column);\n                        for(var row = 0; row < _this.board.length; row++)_this.board[row][col] = column[row];\n                    };\n                    for(var col = 0; col < this.board[0].length; col++)_loop(col);\n                    this._generateNumbers();\n                    this._renderBoard();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this._checkNextStep(this.board, \"down\")) {\n                    var _this = this, _loop = function(col) {\n                        var column = _this.board.map(function(row) {\n                            return row[col];\n                        });\n                        _this._compressDown(column);\n                        _this._mergeDown(column);\n                        _this._compressDown(column);\n                        for(var row = 0; row < _this.board.length; row++)_this.board[row][col] = column[row];\n                    };\n                    for(var col = 0; col < this.board[0].length; col++)_loop(col);\n                    this._generateNumbers();\n                    this._renderBoard();\n                }\n            }\n        },\n        {\n            key: \"_checkMoveDown\",\n            value: function _checkMoveDown(array) {\n                var _this = this, _loop = function(col) {\n                    var column = array.map(function(row) {\n                        return row[col];\n                    });\n                    _this._compressDown(column);\n                    _this._mergeDown(column);\n                    _this._compressDown(column);\n                    for(var row = 0; row < array.length; row++)array[row][col] = column[row];\n                };\n                for(var col = 0; col < array[0].length; col++)_loop(col);\n            }\n        },\n        {\n            key: \"_checkMoveUp\",\n            value: function _checkMoveUp(array) {\n                var _this = this, _loop = function(col) {\n                    var column = array.map(function(row) {\n                        return row[col];\n                    });\n                    _this._compress(column);\n                    _this._merge(column);\n                    _this._compress(column);\n                    for(var row = 0; row < array.length; row++)array[row][col] = column[row];\n                };\n                for(var col = 0; col < array[0].length; col++)_loop(col);\n            }\n        },\n        {\n            key: \"_checkMoveLeft\",\n            value: function _checkMoveLeft(array) {\n                for(var row = 0; row <= array.length - 1; row++){\n                    this._compress(array[row]);\n                    this._merge(array[row]);\n                    this._compress(array[row]);\n                }\n            }\n        },\n        {\n            key: \"_checkMoveRight\",\n            value: function _checkMoveRight(array) {\n                for(var row = 0; row <= array.length - 1; row++){\n                    this._compressDown(array[row]);\n                    this._mergeDown(array[row]);\n                    this._compressDown(array[row]);\n                }\n            }\n        },\n        {\n            key: \"_checkNextStep\",\n            value: function _checkNextStep(copy, direction) {\n                var copyBoard = copy.map(function(subArray) {\n                    return subArray.slice();\n                });\n                switch(direction){\n                    case \"down\":\n                        this._checkMoveDown(copyBoard);\n                        break;\n                    case \"up\":\n                        this._checkMoveUp(copyBoard);\n                        break;\n                    case \"left\":\n                        this._checkMoveLeft(copyBoard);\n                        break;\n                    case \"right\":\n                        this._checkMoveRight(copyBoard);\n                        break;\n                    default:\n                        break;\n                }\n                for(var row = 0; row < this.board.length; row++)for(var col = 0; col < this.board[row].length; col++){\n                    if (this.board[row][col] !== copyBoard[row][col]) return true;\n                }\n                return false;\n            }\n        },\n        {\n            key: \"_merge\",\n            value: function _merge(column) {\n                for(var i = 0; i <= column.length - 1; i++)if (column[i] === column[i + 1] && column[i] > 0) {\n                    column[i] *= 2;\n                    column[i + 1] = 0;\n                    this.score += column[i] / 2;\n                }\n            }\n        },\n        {\n            key: \"_mergeDown\",\n            value: function _mergeDown(column) {\n                for(var i = column.length - 1; i > 0; i--)if (column[i] === column[i - 1] && column[i] > 0) {\n                    column[i] *= 2;\n                    column[i - 1] = 0;\n                    this.score += column[i] / 2;\n                }\n            }\n        },\n        {\n            key: \"_compress\",\n            value: function _compress(col) {\n                var compressedColumn = col.filter(function(cell) {\n                    return cell !== 0;\n                });\n                while(compressedColumn.length < 4)compressedColumn.push(0);\n                col.forEach(function(part, index, array) {\n                    array[index] = compressedColumn[index];\n                });\n            }\n        },\n        {\n            key: \"_compressDown\",\n            value: function _compressDown(col) {\n                var compressedColumn = col.filter(function(cell) {\n                    return cell !== 0;\n                });\n                while(compressedColumn.length < 4)compressedColumn.unshift(0);\n                col.forEach(function(part, index, array) {\n                    array[index] = compressedColumn[index];\n                });\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"idle\") {\n                    this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] = 2;\n                    this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] = 2;\n                }\n                if (this._getEmptyCells().length !== 14) this.start();\n                this.status = \"playing\";\n                this._renderBoard();\n            }\n        },\n        {\n            key: \"_getEmptyCells\",\n            value: function _getEmptyCells() {\n                var empty = [];\n                for(var line = 0; line <= this.board.length - 1; line++){\n                    for(var col = 0; col <= this.board[line].length - 1; col++)if (this.board[line][col] === 0) empty.push([\n                        line,\n                        col\n                    ]);\n                }\n                return empty;\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                if (this.count > 0) {\n                    this.board = [\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        [\n                            0,\n                            0,\n                            0,\n                            0\n                        ]\n                    ];\n                    this.status = \"playing\";\n                    this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] = 2;\n                    this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] = 2;\n                    this._renderBoard();\n                }\n                this.count = 0;\n                this.score = 0;\n            }\n        },\n        {\n            key: \"_generateNumbers\",\n            value: function _generateNumbers() {\n                var empty = this._getEmptyCells();\n                this.count++;\n                var coords = Math.floor(Math.random() * empty.length);\n                var emptyCell = empty[coords];\n                if (emptyCell !== undefined) this.board[emptyCell[0]][emptyCell[1]] = this._getNumber();\n                this._renderBoard();\n            }\n        },\n        {\n            key: \"_renderBoard\",\n            value: function _renderBoard() {\n                var startButton = document.getElementById(\"start-button\");\n                var messageContainer = document.getElementById(\"message-container\");\n                for(var line = 0; line <= this.board.length - 1; line++)for(var col = 0; col <= this.board[line].length - 1; col++){\n                    this.cells[line].cells[col].innerText = this.board[line][col];\n                    this.cells[line].cells[col].classList.value = \"field-cell field-cell--\".concat(this.cells[line].cells[col].innerText);\n                    if (this.board[line][col] === 0) this.cells[line].cells[col].innerText = \"\";\n                }\n                if (this.status === \"playing\") {\n                    startButton.innerText = \"Restart\";\n                    startButton.classList.add(\"restart\");\n                }\n                if (this.status === \"playing\") {\n                    messageContainer.children[2].classList.add(\"hidden\");\n                    messageContainer.children[1].classList.add(\"hidden\");\n                    messageContainer.children[0].classList.add(\"hidden\");\n                }\n                if (this.board.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                })) messageContainer.children[1].classList.remove(\"hidden\");\n                if (!this._checkLoose()) {\n                    this.status = \"lose\";\n                    messageContainer.children[0].classList.remove(\"hidden\");\n                }\n                this.scoreElement[0].innerText = this.score;\n            }\n        },\n        {\n            key: \"_getNumber\",\n            value: function _getNumber() {\n                var numbers = [\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    4\n                ];\n                var index = Math.floor(Math.random() * numbers.length);\n                return numbers[index];\n            }\n        },\n        {\n            key: \"_checkLoose\",\n            value: function _checkLoose() {\n                if (this.board.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 0;\n                    });\n                })) return true;\n                for(var x = 0; x < this.board.length; x++)for(var i = 0; i < this.board[x].length; i++){\n                    if (i < this.board[x].length - 1 && this.board[x][i] === this.board[x][i + 1]) return true;\n                    if (x < this.board[x].length - 1 && this.board[x][i] === this.board[x + 1][i]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports([\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ],\n    [\n        0,\n        0,\n        0,\n        0\n    ]\n]);\nvar $197cd56b15c33885$var$startButton = document.getElementById(\"start-button\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    if ($197cd56b15c33885$var$game.getStatus() === \"idle\") $197cd56b15c33885$var$game.start();\n    else $197cd56b15c33885$var$game.restart();\n});\nwindow.addEventListener(\"keyup\", $197cd56b15c33885$var$handleKey);\nfunction $197cd56b15c33885$var$handleKey(action) {\n    if (action.code === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (action.code === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    if (action.code === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (action.code === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n}\n\n})();\n//# sourceMappingURL=index.aafdfb45.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\n\nconst game = new Game([\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n]);\n\nconst startButton = document.getElementById('start-button');\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    game.restart();\n  }\n});\n\nwindow.addEventListener('keyup', handleKey);\n\nfunction handleKey(action) {\n  if (action.code === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (action.code === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  if (action.code === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (action.code === 'ArrowRight') {\n    game.moveRight();\n  }\n}\n","'use strict';\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.board = initialState;\n    this.score = 0;\n    this.status = 'idle';\n    this.cells = document.getElementsByClassName('field-row');\n    this.scoreElement = document.getElementsByClassName('game-score');\n    this.count = 0;\n  }\n\n  moveLeft() {\n    if (this._checkNextStep(this.board, 'left')) {\n      for (let row = 0; row <= this.board.length - 1; row++) {\n        this._compress(this.board[row]);\n        this._merge(this.board[row]);\n        this._compress(this.board[row]);\n      }\n      this._renderBoard();\n      this._generateNumbers();\n    }\n  }\n\n  moveRight() {\n    if (this._checkNextStep(this.board, 'right')) {\n      for (let row = 0; row <= this.board.length - 1; row++) {\n        this._compressDown(this.board[row]);\n        this._mergeDown(this.board[row]);\n        this._compressDown(this.board[row]);\n      }\n      this._renderBoard();\n      this._generateNumbers();\n    }\n  }\n\n  moveUp() {\n    if (this._checkNextStep(this.board, 'up')) {\n      for (let col = 0; col < this.board[0].length; col++) {\n        const column = this.board.map((row) => row[col]);\n\n        this._compress(column);\n        this._merge(column);\n        this._compress(column);\n\n        for (let row = 0; row < this.board.length; row++) {\n          this.board[row][col] = column[row];\n        }\n      }\n      this._generateNumbers();\n\n      this._renderBoard();\n    }\n  }\n\n  moveDown() {\n    if (this._checkNextStep(this.board, 'down')) {\n      for (let col = 0; col < this.board[0].length; col++) {\n        const column = this.board.map((row) => row[col]);\n\n        this._compressDown(column);\n        this._mergeDown(column);\n        this._compressDown(column);\n\n        for (let row = 0; row < this.board.length; row++) {\n          this.board[row][col] = column[row];\n        }\n      }\n      this._generateNumbers();\n\n      this._renderBoard();\n    }\n  }\n\n  _checkMoveDown(array) {\n    for (let col = 0; col < array[0].length; col++) {\n      const column = array.map((row) => row[col]);\n\n      this._compressDown(column);\n      this._mergeDown(column);\n      this._compressDown(column);\n\n      for (let row = 0; row < array.length; row++) {\n        array[row][col] = column[row];\n      }\n    }\n  }\n  _checkMoveUp(array) {\n    for (let col = 0; col < array[0].length; col++) {\n      const column = array.map((row) => row[col]);\n\n      this._compress(column);\n      this._merge(column);\n      this._compress(column);\n\n      for (let row = 0; row < array.length; row++) {\n        array[row][col] = column[row];\n      }\n    }\n  }\n  _checkMoveLeft(array) {\n    for (let row = 0; row <= array.length - 1; row++) {\n      this._compress(array[row]);\n      this._merge(array[row]);\n      this._compress(array[row]);\n    }\n  }\n  _checkMoveRight(array) {\n    for (let row = 0; row <= array.length - 1; row++) {\n      this._compressDown(array[row]);\n      this._mergeDown(array[row]);\n      this._compressDown(array[row]);\n    }\n  }\n\n  _checkNextStep(copy, direction) {\n    const copyBoard = copy.map((subArray) => subArray.slice());\n\n    switch (direction) {\n      case 'down':\n        this._checkMoveDown(copyBoard);\n        break;\n      case 'up':\n        this._checkMoveUp(copyBoard);\n        break;\n      case 'left':\n        this._checkMoveLeft(copyBoard);\n        break;\n      case 'right':\n        this._checkMoveRight(copyBoard);\n        break;\n      default:\n        break;\n    }\n\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] !== copyBoard[row][col]) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  _merge(column) {\n    for (let i = 0; i <= column.length - 1; i++) {\n      if (column[i] === column[i + 1] && column[i] > 0) {\n        column[i] *= 2;\n\n        column[i + 1] = 0;\n        this.score += column[i] / 2;\n      }\n    }\n  }\n\n  _mergeDown(column) {\n    for (let i = column.length - 1; i > 0; i--) {\n      if (column[i] === column[i - 1] && column[i] > 0) {\n        column[i] *= 2;\n        column[i - 1] = 0;\n        this.score += column[i] / 2;\n      }\n    }\n  }\n\n  _compress(col) {\n    const compressedColumn = col.filter((cell) => cell !== 0);\n\n    while (compressedColumn.length < 4) {\n      compressedColumn.push(0);\n    }\n\n    col.forEach(function (part, index, array) {\n      array[index] = compressedColumn[index];\n    });\n  }\n\n  _compressDown(col) {\n    const compressedColumn = col.filter((cell) => cell !== 0);\n\n    while (compressedColumn.length < 4) {\n      compressedColumn.unshift(0);\n    }\n\n    col.forEach(function (part, index, array) {\n      array[index] = compressedColumn[index];\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'idle') {\n      this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] =\n        2;\n\n      this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] =\n        2;\n    }\n\n    if (this._getEmptyCells().length !== 14) {\n      this.start();\n    }\n\n    this.status = 'playing';\n    this._renderBoard();\n  }\n\n  _getEmptyCells() {\n    const empty = [];\n\n    for (let line = 0; line <= this.board.length - 1; line++) {\n      for (let col = 0; col <= this.board[line].length - 1; col++) {\n        if (this.board[line][col] === 0) {\n          empty.push([line, col]);\n        }\n      }\n    }\n\n    return empty;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    if (this.count > 0) {\n      this.board = [\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n      ];\n      this.status = 'playing';\n\n      this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] =\n        2;\n\n      this.board[Math.floor(Math.random() * 4)][Math.floor(Math.random() * 4)] =\n        2;\n      this._renderBoard();\n    }\n    this.count = 0;\n    this.score = 0;\n  }\n\n  _generateNumbers() {\n    const empty = this._getEmptyCells();\n\n    this.count++;\n\n    const coords = Math.floor(Math.random() * empty.length);\n\n    const emptyCell = empty[coords];\n\n    if (emptyCell !== undefined) {\n      this.board[emptyCell[0]][emptyCell[1]] = this._getNumber();\n    }\n\n    this._renderBoard();\n  }\n\n  _renderBoard() {\n    const startButton = document.getElementById('start-button');\n    const messageContainer = document.getElementById('message-container');\n\n    for (let line = 0; line <= this.board.length - 1; line++) {\n      for (let col = 0; col <= this.board[line].length - 1; col++) {\n        this.cells[line].cells[col].innerText = this.board[line][col];\n\n        this.cells[line].cells[col].classList.value =\n          `field-cell field-cell--${this.cells[line].cells[col].innerText}`;\n\n        if (this.board[line][col] === 0) {\n          this.cells[line].cells[col].innerText = '';\n        }\n      }\n    }\n\n    if (this.status === 'playing') {\n      startButton.innerText = 'Restart';\n      startButton.classList.add('restart');\n    }\n\n    if (this.status === 'playing') {\n      messageContainer.children[2].classList.add('hidden');\n      messageContainer.children[1].classList.add('hidden');\n      messageContainer.children[0].classList.add('hidden');\n    }\n\n    if (this.board.some((row) => row.some((cell) => cell === 2048))) {\n      messageContainer.children[1].classList.remove('hidden');\n    }\n\n    if (!this._checkLoose()) {\n      this.status = 'lose';\n      messageContainer.children[0].classList.remove('hidden');\n    }\n    this.scoreElement[0].innerText = this.score;\n  }\n\n  _getNumber() {\n    const numbers = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\n    const index = Math.floor(Math.random() * numbers.length);\n\n    return numbers[index];\n  }\n\n  _checkLoose() {\n    if (this.board.some((row) => row.some((cell) => cell === 0))) {\n      return true;\n    }\n\n    for (let x = 0; x < this.board.length; x++) {\n      for (let i = 0; i < this.board[x].length; i++) {\n        if (\n          i < this.board[x].length - 1 &&\n          this.board[x][i] === this.board[x][i + 1]\n        ) {\n          return true;\n        }\n\n        if (\n          x < this.board[x].length - 1 &&\n          this.board[x][i] === this.board[x + 1][i]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","arguments","instance","Constructor","TypeError","board","score","status","cells","document","getElementsByClassName","scoreElement","count","value","_checkNextStep","row","_compress","_merge","_renderBoard","_generateNumbers","_compressDown","_mergeDown","_this","_loop","col","column","map","array","copy","direction","copyBoard","subArray","slice","_checkMoveDown","_checkMoveUp","_checkMoveLeft","_checkMoveRight","compressedColumn","filter","cell","push","forEach","part","index","unshift","Math","floor","random","_getEmptyCells","start","empty","line","coords","emptyCell","undefined","_getNumber","startButton","getElementById","messageContainer","innerText","classList","concat","add","children","some","remove","_checkLoose","numbers","x","prototype","$197cd56b15c33885$var$startButton","addEventListener","getStatus","restart","window","action","code","moveUp","moveDown","moveLeft","moveRight"],"version":3,"file":"index.aafdfb45.js.map"}